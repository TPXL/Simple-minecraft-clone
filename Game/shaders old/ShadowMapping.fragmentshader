#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;
in vec4 ProjectorCoord;
in vec3 tangent;
in vec3 bitangent;

// Ouput data
layout(location = 0) out vec3 color;

uniform sampler2D myTextureSampler;
uniform sampler2D mySpecularSampler;
uniform sampler2D myNormalSampler;
uniform sampler2DShadow shadowMap;
uniform sampler2D myProjectionSampler;
uniform sampler2DShadow projectionShadowMap;

uniform mat4 MV;

void main(){

	int texSamplesX = 4;
	int texSamplesY = 4;
	float texDiffuse = 0.002;
	int shadowSamplesX = 4;
	int shadowSamplesY = 4;
	float shadowDiffuse = 0.001;
	float projectionDiffuse = 0.001;
	
	float visibility = 0;
	for(int x = 0; x < shadowSamplesX; x++){
		float xf = (float(x + 0.5)/shadowSamplesX) - 0.5;
		for(int y = 0; y < shadowSamplesY; y++){
			float yf = (float(y + 0.5)/shadowSamplesY) - 0.5;
			vec2 r = vec2(xf, yf) * shadowDiffuse;
			visibility += clamp(texture( shadowMap, vec3(ShadowCoord.xy + r, ShadowCoord.z/ShadowCoord.w) ), 0, 1);
		}
	}
	visibility /= float(shadowSamplesX * shadowSamplesY);
	
	//projection stuff
	
	vec3 projectionDiffuseColor = vec3(0, 0, 0);
	float projectionVisibility = 0;
	
	for(int x = 0; x < shadowSamplesX; x++){
		float xf = (float(x + 0.5)/shadowSamplesX) - 0.5;
		for(int y = 0; y < shadowSamplesY; y++){
			float yf = (float(y + 0.5)/shadowSamplesY) - 0.5;
			vec2 r = vec2(xf, yf) * projectionDiffuse;
			if(ProjectorCoord.x < 0 || ProjectorCoord.y < 0 || ProjectorCoord.x > 1 || ProjectorCoord.y > 1)
				continue;
			projectionVisibility += clamp(texture( projectionShadowMap, vec3(ProjectorCoord.xy + r, ProjectorCoord.z/ProjectorCoord.w) ), 0, 1);
			r = ProjectorCoord.xy + vec2(xf, yf) * projectionDiffuse;
			projectionDiffuseColor += texture2D(myProjectionSampler, r).rgb;
		}
	}
	projectionVisibility /= float(shadowSamplesX * shadowSamplesY);
	projectionDiffuseColor /= float(shadowSamplesX * shadowSamplesY);
	projectionDiffuseColor *= projectionVisibility;
	//
	
	vec3 MaterialDiffuseColor = vec3(0,0,0);
	vec3 MaterialSpecularColor = vec3(0,0,0);
	vec3 NormalMapColor = vec3(0,0,0);
	for(int x = 0; x < texSamplesX; x++){
		float xf = (float(x + 0.5)/texSamplesX) - 0.5;
		for(int y = 0; y < texSamplesY; y++){
			float yf = (float(y + 0.5)/texSamplesY) - 0.5;
			vec2 r = UV + vec2(xf, yf) * texDiffuse;
			MaterialDiffuseColor += texture2D(myTextureSampler, r).rgb;
			MaterialSpecularColor += texture2D(mySpecularSampler, r).rgb;
			NormalMapColor += texture2D(myNormalSampler, r).rgb;
		}
	}
	
	
	
	
	MaterialDiffuseColor /= float(texSamplesY * texSamplesX);
	MaterialSpecularColor /= float(texSamplesY * texSamplesX);
	NormalMapColor /= float(texSamplesY * texSamplesX);
	
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	vec3 e = normalize( EyeDirection_cameraspace );
	
	vec3 nm = normalize((NormalMapColor * 2) - 1);
	n = (tangent * nm.x) + (bitangent * nm.y) + (n * nm.z);
	
	visibility *= clamp( dot( n,l ), 0,1 );
	float shadowMulti = 0.3 + visibility * 0.7;
	//float shadowMulti = 1;
	
	//projectionVisibility *= clamp( dot( n,l ), 0,1 );
	float projectorMulti = 0.3 + projectionVisibility * 0.7;
	//float projectorMulti = 1;
	
	float specMulti = 0.1 + (pow(clamp( dot( e,reflect(-l,n) ), 0, 1 ), 5) * length(MaterialSpecularColor)) * 0.6;
	specMulti *= shadowMulti;
	MaterialDiffuseColor *= shadowMulti;
	float diffuseMulti = 1.0f - specMulti;
	
	color = MaterialDiffuseColor * diffuseMulti + MaterialSpecularColor * specMulti + projectionDiffuseColor;
	color = clamp(color, 0, 1);
	
}