#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec4 ShadowCoord;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightInvDirection_worldspace;
uniform mat4 DepthBiasMVP;
uniform float time;

void main(){

	vec3 vnms = vertexNormal_modelspace;
	vec3 vpms = vertexPosition_modelspace;
	
	float waveSize = 0.2;
	
	//vpms.y -= 0.3 + 0.1*sin(time*0.000000002 + vpms.z*vpms.x*waveSize);
	vpms.y -= 0.3 + 0.1*sin(time*0.000000002 + vpms.x*waveSize + vpms.z * waveSize);
	//vnms.x = 0.1*cos(time*0.000000002 + vpms.z*vpms.x*waveSize);
	vnms.x = 0.1*cos(time*0.000000002 + vpms.x*waveSize+ vpms.z * waveSize);
	vnms.y = 1;
	//vnms.z = 0.1*cos(time*0.000000002 + vpms.z*vpms.x*waveSize);
	vnms.z = 0.1*cos(time*0.000000002 + vpms.x*waveSize+ vpms.z * waveSize);

	vec4 vnmspace = vec4(vnms,0);
	vec4 vpmspace = vec4(vpms,1);
	
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vpmspace;
	
	ShadowCoord = DepthBiasMVP * vpmspace;
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vpmspace).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	EyeDirection_cameraspace = vec3(0,0,0) - ( V * M * vpmspace).xyz;

	// Vector that goes from the vertex to the light, in camera space
	LightDirection_cameraspace = (V*vec4(LightInvDirection_worldspace,0)).xyz;
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( V * M * vnmspace).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
	
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
	//UV.x += cos(time*0.000000002 + vpms.x*waveSize + vpms.z*waveSize)*0.004;
 	//UV.y += cos(time*0.000000002 + vpms.x*waveSize + vpms.z*waveSize)*0.004;
}

